

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target, int* returnSize){
    int max,min;
    int i;
    int *ans=malloc(sizeof(int)*2);
    
    max=0;
    min=0;
    
    for (i=0;i<numsSize;i++){
        if (max<nums[i]){
            max=nums[i];
        }
        if (min>nums[i]){
            min=nums[i];
        }
    }
    
    int *check=malloc(sizeof(int)*(max-min+1)*2);
    
    memset(check,0,sizeof(check));
    
    for (i=0;i<numsSize;i++){
        check[nums[i]-min]=1;
        check[nums[i]+max-min+1]=i;
    }
    
    *returnSize=2;
    
    for (i=0;i<numsSize;i++){
        if (target-min-nums[i]>=0){
            if (check[target-min-nums[i]]==1 && check[target-min-nums[i]+max+1]!=i){
                ans[0]=i;
                ans[1]=check[target-min-nums[i]+max+1];
                return ans;
            }
        }
    }
    
    /*
    for (i=0;i<numsSize;i++){
        a=target-nums[i];
        for (j=i+1;j<numsSize;j++){
            if (a==nums[j]){
                ans[0]=i;
                ans[1]=j;
                *returnSize=2;
                return ans;
            }
        }
    }
    */
    /*
    ans[0]=0;
    
    ans[1]=1;
    */
    *returnSize=2;
    return ans;
    
    
//    return 0;
}

